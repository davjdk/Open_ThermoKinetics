#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —É–ø—Ä–æ—â–µ–Ω–∏–µ
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))


def check_value_aggregator_removal():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ ValueAggregator"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ValueAggregator...")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
    value_agg_path = Path("src/log_aggregator/value_aggregator.py")
    if value_agg_path.exists():
        print("‚ùå FAILED: –§–∞–π–ª ValueAggregator –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False

    print("‚úÖ –§–∞–π–ª ValueAggregator —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ backup —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    backup_path = Path("src/log_aggregator/value_aggregator.py.backup")
    if backup_path.exists():
        print("‚úÖ Backup —Ñ–∞–π–ª ValueAggregator —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ö†Ô∏è  WARNING: Backup —Ñ–∞–π–ª ValueAggregator –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return True


def check_functionality_migration():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        from src.log_aggregator.operation_logger import OperationLogger, log_operation

        logger = OperationLogger()  # –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        large_list = list(range(5000))
        compressed = logger._compress_value(large_list)
        display_value = logger._get_display_value(compressed)

        if "5000 items" in display_value:
            print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå FAILED: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {display_value}")
            return False

        # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
        with log_operation("VALIDATION_TEST"):
            logger.add_metric("test_data", large_list)
            logger.add_metric("status", "testing")

        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True

    except Exception as e:
        print(f"‚ùå FAILED: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def check_performance():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        from src.log_aggregator.operation_logger import OperationLogger

        start_time = time.time()

        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger = OperationLogger()  # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ª–æ–≥–≥–µ—Ä
        for i in range(100):
            with logger.log_operation(f"perf_test_{i}"):
                # –ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                large_data = [f"item_{j}" for j in range(1000)]
                logger.add_metric("large_data", large_data)
                logger.add_metric("iteration", i)

        elapsed = time.time() - start_time
        avg_time = elapsed / 100 * 1000  # –º—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 100 –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {elapsed:.3f}s")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {avg_time:.1f}ms")

        if elapsed < 5.0:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
            return True
        else:
            print("‚ö†Ô∏è  WARNING: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    except Exception as e:
        print(f"‚ùå FAILED: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def check_system_health():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        from src.log_aggregator.operation_logger import OperationLogger
        from src.log_aggregator.operation_monitor import OperationMonitor
        from src.log_aggregator.realtime_handler import AggregatingHandler

        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        _ = OperationLogger()

        # OperationMonitor —Ç—Ä–µ–±—É–µ—Ç config
        from src.log_aggregator.operation_monitor import OperationMonitoringConfig

        config = OperationMonitoringConfig()
        _ = OperationMonitor(config)

        _ = AggregatingHandler()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AggregatingHandler

        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        return True

    except Exception as e:
        print(f"‚ùå FAILED: –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("=" * 70)
    print("üî¨ –í–ê–õ–ò–î–ê–¶–ò–Ø –≠–¢–ê–ü–ê 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï, –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø, –£–ü–†–û–©–ï–ù–ò–ï")
    print("=" * 70)

    checks = [
        ("–£–¥–∞–ª–µ–Ω–∏–µ ValueAggregator", check_value_aggregator_removal),
        ("–ü–µ—Ä–µ–Ω–æ—Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", check_functionality_migration),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", check_performance),
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", check_system_health),
    ]

    passed = 0
    total = len(checks)

    for name, check_func in checks:
        try:
            if check_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå FAILED: {name} - {e}")

    print("\n" + "=" * 70)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –≠—Ç–∞–ø 7 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        print("\n‚úÖ ValueAggregator —É–¥–∞–ª–µ–Ω")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
